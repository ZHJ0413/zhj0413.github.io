<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>浏览器底层原理</title>
    <link href="/2023/09/01/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/"/>
    <url>/2023/09/01/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<blockquote><p>以chrome为例进行研究和分析</p></blockquote><h2 id="1-宏观视角下的浏览器"><a href="#1-宏观视角下的浏览器" class="headerlink" title="1. 宏观视角下的浏览器"></a>1. 宏观视角下的浏览器</h2><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs axapta">c/s <span class="hljs-keyword">client</span> --<span class="hljs-keyword">server</span><br>b/s browser --<span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure><h2 id="2-进程和线程"><a href="#2-进程和线程" class="headerlink" title="2. 进程和线程"></a>2. 进程和线程</h2><ul><li><strong>进程</strong>就是在内存中正在运行的应用程序<ul><li>在内存中独占一个内存空间</li><li>进程和进程之间是相互隔离的</li></ul></li><li><strong>线程</strong>就是进程的最小执行单位（CPU调度的最小单位）<ul><li>一个进程是由多个线程组成的</li><li>线程和线程之间也是相互隔离的</li></ul></li></ul><p>1、线程是进程的基本单位，一个进程由一个或者多个线程组成，搞清楚这个关系之后，我们可以明确线程就是程序执行的最小单元</p><p>2、线程和进程一样，也是动态概念，有创建有销毁，存在只是暂时的，不是永久性的</p><p>3、进程与线程的区别在于进程在运行时拥有独立的内存空间，也就是说每个进程所占用的内存都是独立的</p><p>4、多个线程是共享内存空间的，但是每个线程的执行是相互独立的，线程必须依赖于进程才能执行，单独的线程是无法执行的，由进程来控制多个线程的执行，没有进程就不存在线程</p><h2 id="3-浏览器中的五个进程"><a href="#3-浏览器中的五个进程" class="headerlink" title="3. 浏览器中的五个进程"></a>3. 浏览器中的五个进程</h2><ul><li><strong>浏览器进程。</strong>主要负责界面显示、用户交互、子进程管理、同时提供存储等功能。</li><li><strong>渲染进程。</strong> 核心任务是将HTML、CSS和JavaScript<strong>转换</strong>为<strong>用户可以与之交互的网页</strong>，排版引擎Blink和JavaScript引擎V8都运行在该进程中，默认情况下，Chrome为每一个Tab标签页创建一个渲染进程。出于安全考虑，渲染进程都是运行在沙箱模式下的。</li><li><strong>GPU进程。</strong>GPU图形处理器（英语：graphics processing unit，缩写：<em>GPU</em>）,负责3D css效果，网页，Chrome ui的绘制。</li><li><strong>网络进程</strong>。主要负责页面的网络资源加载，之前是作为一个模块运行在浏览器进程里面的，直至最近才独立处理，成为单独一个进程。</li><li><strong>插件进程</strong>。主要负责插件的运行，因为插件易崩溃，所以通过插件进程来隔离，以保证插件进程崩溃不会对浏览器和页面造成影响</li></ul><h2 id="4-计算机网路的七层模型"><a href="#4-计算机网路的七层模型" class="headerlink" title="4. 计算机网路的七层模型"></a>4. 计算机网路的七层模型</h2><ul><li><p><strong>应用层</strong>：HTTP协议</p></li><li><p><strong>表示层</strong>：</p></li><li><p><strong>会话层</strong>：</p></li><li><p><strong>传输层</strong>：UDP（用户数据包协议）&#x2F;TCP（传输控制协议）</p></li><li><p><strong>网络层</strong>：IP协议</p></li><li><p><strong>数据链路层</strong>：MAC地址，封装byte</p></li><li><p><strong>物理层</strong>：使用一定的物理介质（网线，光纤，wifi）来进行计算机之间的连接</p></li></ul><h2 id="5-HTTP的请求流程"><a href="#5-HTTP的请求流程" class="headerlink" title="5. HTTP的请求流程"></a>5. HTTP的请求流程</h2><blockquote><p>浏览器发送HTTP请求的过程</p></blockquote><ul><li>构造请求行：<code>GET test/artice HTTP/1.1</code></li><li>查找缓存：有缓存就取缓存，没有缓存就发送网络请求</li><li>准备IP地址和端口号</li><li>等待TCP队列：一个域名最多建立6个TCP连接</li><li>建立TCP连接</li><li>发送HTTP请求</li></ul><blockquote><p>服务器返回HTTP请求</p></blockquote><ul><li>返回请求内容</li><li>断开连接</li></ul><h2 id="5-从进程的角度讨论输入URL地址到浏览器显示页面的过程中发生了什么？"><a href="#5-从进程的角度讨论输入URL地址到浏览器显示页面的过程中发生了什么？" class="headerlink" title="5. 从进程的角度讨论输入URL地址到浏览器显示页面的过程中发生了什么？"></a>5. 从进程的角度讨论输入URL地址到浏览器显示页面的过程中发生了什么？</h2><blockquote><p>浏览器主进程，网络进程，渲染进程</p></blockquote><ul><li><p>浏览器主进程中输入URL请求</p></li><li><p>浏览器主进程将URL请求派发给网络进程</p></li><li><p>在网络进程中发送URL请求，获取响应头数据，解析响应头数据后将数据转发给浏览器主进程</p></li><li><p>浏览器主进程接收到网络进程的响应数据之后发送<strong>提交文档</strong>消息到渲染进程</p><ul><li>提交文档：在浏览器主进程中，将网络进程接受的HTML数据提交给渲染进程。</li></ul></li><li><p>在渲染进程中接受到消息之后，准备接收HTML数据，接受数据的方式是直接和网络进程之间建立数据管道</p></li><li><p>文档数据传输完毕，渲染进程会返回<strong>确认提交</strong>消息给浏览器主进程</p></li><li><p>在浏览器主进程中受到渲染进程的<strong>确认提交</strong>消息后，开始移除旧的文档，更新浏览器进程的页面状态</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>2</category>
      
    </categories>
    
    
    <tags>
      
      <tag>浏览器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>函数柯里化</title>
    <link href="/2023/09/01/%E5%87%BD%E6%95%B0%E7%9A%84%E6%9F%AF%E9%87%8C%E5%8C%96/"/>
    <url>/2023/09/01/%E5%87%BD%E6%95%B0%E7%9A%84%E6%9F%AF%E9%87%8C%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是函数柯里化"><a href="#什么是函数柯里化" class="headerlink" title="什么是函数柯里化"></a>什么是函数柯里化</h2><ul><li>一个函数有多个参数，根据这个函数的参数个数，转化成多个函数</li><li>函数柯里化在高阶函数中体现</li><li>大多是情况下是为了减少重复传递的不变参数</li></ul><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><ul><li>判断数据类型的常规实现</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">isType</span>(<span class="hljs-params">type,val</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(val) === <span class="hljs-string">`[object <span class="hljs-subst">$&#123;type&#125;</span>]`</span><br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">isType</span>(<span class="hljs-string">&#x27;Number&#x27;</span>,<span class="hljs-number">1</span>))<span class="hljs-comment">//true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">isType</span>(<span class="hljs-string">&#x27;String&#x27;</span>,<span class="hljs-number">1</span>))<span class="hljs-comment">//false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">isType</span>(<span class="hljs-string">&#x27;Array&#x27;</span>,[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]))<span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><ul><li>使用函数柯里化实现</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">isType</span>(<span class="hljs-params">type</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">val</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(val) === <span class="hljs-string">`[object <span class="hljs-subst">$&#123;type&#125;</span>]`</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> isNumber = <span class="hljs-title function_">isType</span>(<span class="hljs-string">&#x27;Number&#x27;</span>)<br><span class="hljs-keyword">const</span> isString = <span class="hljs-title function_">isType</span>(<span class="hljs-string">&#x27;String&#x27;</span>)<br><span class="hljs-keyword">const</span> isArray = <span class="hljs-title function_">isType</span>(<span class="hljs-string">&#x27;Array&#x27;</span>)<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">isNumber</span>(<span class="hljs-number">1</span>))<span class="hljs-comment">//true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">isString</span>(<span class="hljs-number">1</span>))<span class="hljs-comment">//false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">isArray</span>([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]))<span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><h2 id="函数柯里化转化"><a href="#函数柯里化转化" class="headerlink" title="函数柯里化转化"></a>函数柯里化转化</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//原函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">a,b,c,d</span>) &#123;<br>    <span class="hljs-keyword">return</span> a+b+c+d<br>&#125;<br><br><span class="hljs-comment">//转化函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">currying</span>(<span class="hljs-params">fn</span>) &#123;<br>    <span class="hljs-keyword">let</span> args = []<br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">_curry</span> = (<span class="hljs-params">arr = []</span>)=&gt;&#123;<br>        args.<span class="hljs-title function_">push</span>(...arr)<br>        <span class="hljs-keyword">return</span> args.<span class="hljs-property">length</span> &gt;= fn.<span class="hljs-property">length</span> ? <span class="hljs-title function_">fn</span>(...args) : <span class="hljs-function">(<span class="hljs-params">...args</span>)=&gt;</span><span class="hljs-title function_">_curry</span>(args)<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">_curry</span>()<br>&#125;<br><br><span class="hljs-comment">//实现柯里化</span><br><span class="hljs-keyword">const</span> fn = <span class="hljs-title function_">currying</span>(sum)<br><span class="hljs-keyword">let</span> fn1 = <span class="hljs-title function_">fn</span>(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">let</span> fn2 = <span class="hljs-title function_">fn1</span>(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<br><span class="hljs-keyword">let</span> res = <span class="hljs-title function_">fn2</span>(<span class="hljs-number">4</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<span class="hljs-comment">//10</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>2</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>观察者模式</title>
    <link href="/2023/09/01/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <url>/2023/09/01/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是观察者模式"><a href="#什么是观察者模式" class="headerlink" title="什么是观察者模式"></a>什么是观察者模式</h2><p>观察者模式是一种设计模式，用于在对象之间建立一种一对多的依赖关系。在该模式中，当一个对象的状态发生变化时，所有依赖于它的对象都会得到通知并自动更新。</p><p>简单来说，观察者模式就像是订阅和通知的关系。主题对象就像一个发布者，而观察者对象就像订阅者。当主题对象的状态发生改变时，它会通知所有注册的观察者对象，观察者对象就能够获取到最新的状态并执行相应的操作。</p><p>观察者模式的优点在于它实现了对象间的解耦。主题对象并不需要知道观察者的具体细节，只需要知道观察者实现了特定的接口或遵循了约定。这样可以使系统的各个部分相互独立，易于维护和扩展。</p><h2 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h2><p>假设你有一个新闻发布系统，其中包括新闻主题和订阅者（即观察者）。当有新的新闻发布时，主题对象会通知所有的订阅者，并把最新的新闻内容传递给它们。订阅者可以是网站、移动应用或其他系统，它们根据收到的新闻内容来更新自己的展示界面或执行其他相关操作。</p><p>总结来说，观察者模式是一种用于实现对象间通信和状态更新的模式。它通过主题和观察者之间的订阅关系，实现了一种松耦合的方式，让对象之间能够灵活地相互通信和相应变化。</p><h2 id="观察者模式和发布订阅模式的区别"><a href="#观察者模式和发布订阅模式的区别" class="headerlink" title="观察者模式和发布订阅模式的区别"></a>观察者模式和发布订阅模式的区别</h2><p>观察者模式（Observer Pattern）中，主题对象和观察者对象之间存在一对多的依赖关系。主题对象维护了一个观察者列表，当主题状态发生变化时，会通知所有的观察者进行更新。观察者模式中的观察者们直接订阅主题，主题和观察者之间紧密关联。</p><p>而发布-订阅模式（Publish-Subscribe Pattern）中，引入了一个消息代理（或称为事件总线）作为中介。发布者（发布消息的对象）将消息发布到消息代理，而订阅者（订阅消息的对象）通过订阅特定类型的消息来接收通知。发布者和订阅者之间相互独立，它们不直接知道彼此的存在。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Observer</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">cache</span> = []<br>    &#125;<br>    <span class="hljs-title function_">subscribe</span>(<span class="hljs-params">callback</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">cache</span>.<span class="hljs-title function_">push</span>(callback)<br>    &#125;<br><br>    <span class="hljs-title function_">unsubscribe</span>(<span class="hljs-params">callback</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">cache</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">cache</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item !== callback)<br>    &#125;<br><br>    <span class="hljs-title function_">notify</span>(<span class="hljs-params">...args</span>)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">cache</span>.<span class="hljs-property">length</span> &amp;&amp; <span class="hljs-variable language_">this</span>.<span class="hljs-property">cache</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">callback</span>=&gt;</span>&#123;<br>            <span class="hljs-title function_">callback</span>(...args)<br>        &#125;)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> observer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Observer</span>()<br>observer.<span class="hljs-title function_">subscribe</span>(<span class="hljs-function">(<span class="hljs-params">data</span>)=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data)<br>&#125;)<br><br>observer.<span class="hljs-title function_">notify</span>(<span class="hljs-string">&#x27;hello world&#x27;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>3</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>高阶函数</title>
    <link href="/2023/09/01/%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/"/>
    <url>/2023/09/01/%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是高阶函数"><a href="#什么是高阶函数" class="headerlink" title="什么是高阶函数"></a>什么是高阶函数</h2><ul><li>一个函数的参数是一个函数（回调函数）</li><li>一个函数的返回值是一个函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn1</span>(<span class="hljs-params">foo</span>)&#123;<br>    <span class="hljs-title function_">foo</span>()<br>&#125;<br><span class="hljs-title function_">fn1</span>(<span class="hljs-function">()=&gt;</span>&#123;&#125;)<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn2</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="高阶函数的运用"><a href="#高阶函数的运用" class="headerlink" title="高阶函数的运用"></a>高阶函数的运用</h2><ul><li>在执行一个方法之前我们还需要做一些其他的事情或者执行一些其他的方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params">a,b,c</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a,b,c)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;核心逻辑&#x27;</span>)<br>&#125;<br><br><span class="hljs-comment">//fn.before = function (beforeFn) &#123;</span><br><span class="hljs-comment">//    return  (...args)=&gt; &#123;</span><br><span class="hljs-comment">//        beforeFn()</span><br><span class="hljs-comment">//        this(...args)</span><br><span class="hljs-comment">//    &#125;</span><br><span class="hljs-comment">//&#125;</span><br><br><span class="hljs-comment">//将before函数挂在刀Function原型链上</span><br><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">before</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">beforeFn</span>) &#123;<br>    <span class="hljs-keyword">return</span>  <span class="hljs-function">(<span class="hljs-params">...args</span>)=&gt;</span> &#123;<span class="hljs-comment">//args收集所有参数</span><br>        <span class="hljs-title function_">beforeFn</span>()<br>        <span class="hljs-title function_">this</span>(...args)<span class="hljs-comment">//this指向fn（谁调用指向谁）</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> newFn = fn.<span class="hljs-title function_">before</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;核心逻辑之前的逻辑&#x27;</span>)<br>&#125;)<br><span class="hljs-title function_">newFn</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<span class="hljs-comment">//核心逻辑之前的逻辑核心逻辑</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>3</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>什么是发布-订阅模式</title>
    <link href="/2023/09/01/%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <url>/2023/09/01/%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>发布订阅模式（Publish-Subscribe Pattern）是一种软件设计模式，用于实现解耦合的消息传递系统。在这种模式中，消息的发送者（发布者）不会直接将消息发送给特定的接收者（订阅者），而是通过一个称为消息代理（或消息中间件）的中介来传递消息。</p><p>在发布订阅模式中，发布者和订阅者之间不存在直接的耦合关系。发布者负责发布消息，而订阅者负责订阅感兴趣的消息类型。当有新的消息发布时，消息代理会将消息传递给所有订阅了相关消息类型的订阅者。</p><p>这种模式的一个常见应用场景是事件驱动架构，其中组件之间的通信通过消息传递来实现。发布者可以发布各种类型的事件，而订阅者可以选择订阅他们感兴趣的事件类型。这样，发布者和订阅者可以独立地演化和扩展，而不会影响彼此。</p><h2 id="举个例子来说明发布订阅模式"><a href="#举个例子来说明发布订阅模式" class="headerlink" title="举个例子来说明发布订阅模式"></a>举个例子来说明发布订阅模式</h2><p>假设有一个新闻网站，它需要将新闻内容传递给订阅了相关类别的用户。新闻网站可以作为发布者，将不同类别的新闻发布到消息代理中。而用户可以作为订阅者，选择订阅自己感兴趣的新闻类别。当新的新闻发布时，消息代理会将相关新闻传递给所有订阅了该类别的用户，使他们能够及时获取到感兴趣的内容。</p><h2 id="如何实现发布-订阅模式"><a href="#如何实现发布-订阅模式" class="headerlink" title="如何实现发布-订阅模式"></a>如何实现发布-订阅模式</h2><p>首先我们需要一个集中的消息调度中心来存放事件（代码中用key表示）。</p><p>订阅者订阅的事件会被注册到调度中心。</p><p>发布者发布事件后，调度中心收到提示会自动发送给订阅者。</p><ul><li><p>创建<code>EventEmitter</code>类。</p></li><li><p><code>cache</code>用来存放事件。</p></li><li><p>on方法接受订阅者的订阅，并存储在<code>cache</code>中。</p></li><li><p><code>emit</code>方法将<code>cache</code>中存放的函数全部执行，完成了发布流程。</p></li></ul><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">EventEmitter</span> &#123;<br>    <br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">cache</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>()<br>    &#125;<br>    <br>    <span class="hljs-title function_">on</span>(<span class="hljs-params">key,callback</span>)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">cache</span>.<span class="hljs-title function_">has</span>(key) ? <span class="hljs-variable language_">this</span>.<span class="hljs-property">cache</span>.<span class="hljs-title function_">get</span>(key).<span class="hljs-title function_">add</span>(callback) : <span class="hljs-variable language_">this</span>.<span class="hljs-property">cache</span>.<span class="hljs-title function_">set</span>(key,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([callback]))<br>    &#125;<br>    <br>    <span class="hljs-title function_">emit</span>(<span class="hljs-params">key,...args</span>)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">cache</span>.<span class="hljs-title function_">has</span>(key) &amp;&amp; <span class="hljs-variable language_">this</span>.<span class="hljs-property">cache</span>.<span class="hljs-title function_">get</span>(key).<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">callback</span>=&gt;</span>&#123;<br>            <span class="hljs-title function_">callback</span>(...args)<br>        &#125;)<br>    &#125;<br>    <br>    <span class="hljs-title function_">off</span>(<span class="hljs-params">key,callback</span>)&#123;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-variable language_">this</span>.<span class="hljs-property">cache</span>.<span class="hljs-title function_">has</span>(key))    <span class="hljs-keyword">return</span><br>        <span class="hljs-keyword">if</span>(callback)<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">cache</span>.<span class="hljs-title function_">get</span>(key).<span class="hljs-title function_">delete</span>(callback)<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">cache</span>.<span class="hljs-title function_">delete</span>(key)<br>    &#125;<br><br>    <span class="hljs-title function_">once</span>(<span class="hljs-params">key,callback</span>)&#123;<br>        <span class="hljs-keyword">const</span> <span class="hljs-title function_">fn</span> = (<span class="hljs-params">...args</span>) =&gt;&#123;<br>            <span class="hljs-title function_">callback</span>(...args)<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">off</span>(key,fn)<br>        &#125;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">on</span>(key,fn)<br>    &#125;<br>    <br>&#125;<br><br><br><span class="hljs-keyword">const</span> e = <span class="hljs-keyword">new</span> <span class="hljs-title class_">EventEmitter</span>()<br><br>e.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;type&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">...args</span>)=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(args)<br>&#125;)<br><br>e.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;type&#x27;</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>2</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手写Promises/A+</title>
    <link href="/2023/09/01/Promise/"/>
    <url>/2023/09/01/Promise/</url>
    
    <content type="html"><![CDATA[<h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><ul><li><strong>promise：</strong>是具有符合本规范的<code>then</code>方法的对象或函数。</li><li><strong>thenable：</strong>是定义了<code>then</code>方法的对象或函数。</li><li><strong>value：</strong>是任何合法的<code>JavaScript</code>值（包括<code>undefined</code>、<code>thenable</code>或<code>promise</code>）。</li><li><strong>exception</strong>是使用<code>throw</code>语句抛出的值。</li><li><strong>reason：</strong>是表示<code>promise</code>被拒绝的原因的值。</li></ul><h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><h3 id="Promise的状态"><a href="#Promise的状态" class="headerlink" title="Promise的状态"></a>Promise的状态</h3><ul><li>一个<code>promise</code>必须处于以下三种状态之一：<code>pending</code>（等待）、<code>fulfilled</code>（已完成）或<code>rejected</code>（已拒绝）。</li><li>当且仅当<code>promise</code>处于<code>pending</code>（等待）时，才可被修改。</li><li>处于<code>fulfilled</code>状态下的<code>promise</code>不可转换为其他状态，且必须有一个不可更改的值（<code>value</code>）。</li><li>处于<code>rejected</code>状态下的<code>promise</code>不可转换为其他状态，且必须有一个不可更改的原因（<code>reason</code>）。</li></ul><h3 id="then方法"><a href="#then方法" class="headerlink" title="then方法"></a>then方法</h3><p>promise必须提供一个<code>then</code>方法以访问其当前或最终的值或原因。</p><p>一个promise的<code>then</code>方法接受两个参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">promise.<span class="hljs-title function_">then</span>(onFulfilled, onRejected)<br></code></pre></td></tr></table></figure><ul><li><p><strong><code>onFulfilled</code>:</strong></p><ul><li><p><code>onFulfilled</code>是可选参数。</p></li><li><p>我们期望<code>onFulfilled</code>是一个函数，如果<code>onFulfilled</code>不是一个函数，它必须被忽略。</p></li><li><p>它必须在<code>promise</code>实现后调用，并以<code>promise</code>的值作为其第一个参数。</p></li><li><p>在<code>promise</code>实现之前不得调用它。</p></li><li><p>它不能被调用多次。</p></li></ul></li></ul><p><strong><code>onRejected</code>:</strong></p><ul><li><p><code>onRejected</code>是可选参数。</p></li><li><p>我们期望<code>onRejected</code>是一个函数，如果<code>onRejected</code>不是一个函数，它必须被忽略。</p></li><li><p>它必须在<code>promise</code>实现后调用，并以<code>promise</code>的原因作为其第一个参数。</p></li><li><p>在<code>promise</code>  被拒绝之前不得调用它。</p></li><li><p>它不能被调用多次。</p></li><li><p><code>onFulfilled</code>或<code>onRejected</code>不能在执行上下文堆栈中只包含平台代码之前调用。</p></li><li><p><code>onFulfilled</code>和<code>onRejected</code>必须作为函数被调用（即没有<code>this</code>值）。</p></li><li><p>then方法可以在同一个promise上多次调用。</p><ul><li>如果&#x2F;当<code>promise</code>被实现时，所有相应的<code>onFulfilled</code>回调函数必须按照它们发起<code>then</code>调用的顺序执行。</li><li>如果&#x2F;当<code>promise</code>被拒绝时，所有相应的<code>onRejected</code>回调函数必须按照它们发起<code>then</code>调用的顺序执行。</li></ul></li><li><p><code>then</code>方法必须返回一个promise。</p><ul><li><pre><code class="js">promise2 = promise1.then(onFulfilled, onRejected);<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br>  - 如果`onFulfilled`或`onRejected`返回一个值`x`，则运行Promise Resolution Procedure `[[Resolve]](promise2, x)`。<br><br>  - 如果`onFulfilled`或`onRejected`抛出异常`e`，则`promise2`必须以`e`作为原因被拒绝。<br><br>  - 如果`onFulfilled`不是一个函数且`promise1`被实现，则`promise2`必须以与`promise1`相同的值被实现。<br><br>  - 如果`onRejected`不是一个函数且`promise1`被拒绝，则`promise2`必须以与`promise1`相同的原因被拒绝。<br><br>## Promise解决过程<br><br>**Promise解决过程**是一个抽象操作，接受一个promise和一个值作为输入，我们将其表示为`[[Resolve]](promise, x)`。如果`x`是一个thenable，它尝试使`promise`采用`x`的状态，假设`x`至少在某种程度上像一个promise。否则，它使用值`x`来实现`promise`。<br><br>对thenable的处理允许promise实现进行互操作，只要它们暴露符合Promises/A+的`then`方法。它还允许Promises/A+实现通过合理的`then`方法来“吸收”不符合规范的实现。<br><br>运行`[[Resolve]](promise, x)`，执行以下步骤：<br><br><span class="hljs-number">1</span>. 如果`promise`和`x`引用同一个对象，则以`TypeError`为原因拒绝`promise`。<br><span class="hljs-number">2</span>. 如果`x`是一个promise，采用其状态<br>   <span class="hljs-number">1</span>. 如果`x`处于待定状态，则`promise`必须保持待定状态，直到`x`被实现或拒绝。<br>   <span class="hljs-number">2</span>. 如果/当`x`被实现时，用相同的值实现`promise`。<br>   <span class="hljs-number">3</span>. 如果/当`x`被拒绝时，用相同的原因拒绝`promise`。<br><span class="hljs-number">3</span>. 否则，如果`x`是一个对象或函数：<br>   <span class="hljs-number">1</span>. 让`then`为`x.then`。<br>   <span class="hljs-number">2</span>. 如果获取属性`x .then`导致抛出异常`e`，则以`e`为原因拒绝`promise`。<br>   <span class="hljs-number">3</span>. 如果`then`是一个函数，则以`x`作为`this`，第一个参数为`resolvePromise`，第二个参数为`rejectPromise`调用它。其中：<br>      <span class="hljs-number">1</span>. 如果/当`resolvePromise`被调用并传入值`y`，运行`[[Resolve]](promise, y)`。<br>      <span class="hljs-number">2</span>. 如果/当`rejectPromise`被调用并传入原因`r`，以`r`拒绝`promise`。<br>      <span class="hljs-number">3</span>. 如果`resolvePromise`和`rejectPromise`都被调用，或者对同一个参数进行多次调用，则第一次调用优先，任何后续调用都将被忽略。<br>      <span class="hljs-number">4</span>. 如果调用`then`导致抛出异常`e`，<br>         <span class="hljs-number">1</span>. 如果已经调用了`resolvePromise`或`rejectPromise`，则忽略它。<br>         <span class="hljs-number">2</span>. 否则，以`e`为原因拒绝`promise`。<br>   <span class="hljs-number">4</span>. 如果`then`不是一个函数，则以`x`来实现`promise`。<br><span class="hljs-number">4</span>. 如果`x`不是对象或函数，则用`x`来实现`promise`。<br><br>如果一个promise被解决为一个参与循环thenable链的thenable，以至于递归的`[[Resolve]](promise, thenable)`最终再次调用`[[Resolve]](promise, thenable)`，按照上述算法进行将导致无限递归。实现可以选择性地检测到这种递归并以一个信息丰富的`TypeError`为原因拒绝`promise`，但不是必须的。<br><br>## 代码实现<br><br>```js<br>class Promise &#123;<br>    constructor(executor) &#123;<br>        this.PromiseState = Promise.PENDING<br>        this.value = undefined<br>        this.reason = undefined<br>        this.onFulfilledCallbacks = []<br>        this.onRejectedCallbacks = []<br>        const resolve = value =&gt; &#123;<br>            if(this.PromiseState === Promise.PENDING)&#123;<br>                this.PromiseState = Promise.FULFILLED<br>                this.value = value<br>                this.onFulfilledCallbacks.forEach(callback=&gt;callback(this.value))<br>            &#125;<br>        &#125;<br>        const reject = reason =&gt; &#123;<br>            if(this.PromiseState === Promise.PENDING)&#123;<br>                this.PromiseState = Promise.REJECTED<br>                this.reason = reason<br>                this.onRejectedCallbacks.forEach(callback=&gt;callback(this.reason))<br>            &#125;<br>        &#125;<br>        try&#123;<br>            executor(resolve,reject)<br>        &#125;catch (e) &#123;<br>            reject(e)<br>        &#125;<br>    &#125;<br><br>    then(onFulfilled, onRejected)&#123;<br>        if(typeof onFulfilled !== &#x27;function&#x27;)&#123;<br>            onFulfilled =  value =&gt; &#123;<br>                <span class="hljs-keyword">return</span> value<br>            &#125;<br>        &#125;<br>        if(typeof onRejected !== &#x27;function&#x27;)&#123;<br>            onRejected =  reason =&gt; &#123;<br>                <span class="hljs-keyword">throw</span> reason<br>            &#125;<br>        &#125;<br>        let promise2 = <span class="hljs-keyword">new</span> Promise((resolve,reject)=&gt;&#123;<br>            if(this.PromiseState === Promise.FULFILLED)&#123;<br>                setTimeout(()=&gt;&#123;<br>                    try&#123;<br>                        const x = onFulfilled(this.value)<br>                        Promise.resolvePromise(promise2,x,resolve,reject)<br>                    &#125;catch (e) &#123;<br>                        reject(e)<br>                    &#125;<br>                &#125;)<br>            &#125;<br>            if(this.PromiseState === Promise.REJECTED)&#123;<br>                setTimeout(()=&gt;&#123;<br>                    try&#123;<br>                        const x = onRejected(this.reason)<br>                        Promise.resolvePromise(promise2,x,resolve,reject)<br>                    &#125;catch (e) &#123;<br>                        reject(e)<br>                    &#125;<br>                &#125;)<br>            &#125;<br>            if(this.PromiseState === Promise.PENDING)&#123;<br>                this.onFulfilledCallbacks.push((value)=&gt;&#123;<br>                    setTimeout(() =&gt; &#123;<br>                        try&#123;<br>                            const x = onFulfilled(value)<br>                            Promise.resolvePromise(promise2,x,resolve,reject)<br>                        &#125;catch (e) &#123;<br>                            reject(e)<br>                        &#125;<br>                    &#125;)<br>                &#125;)<br>                this.onRejectedCallbacks.push((reason)=&gt;&#123;<br>                    setTimeout(() =&gt; &#123;<br>                        try&#123;<br>                            const x = onRejected(reason)<br>                            Promise.resolvePromise(promise2,x,resolve,reject)<br>                        &#125;catch (e) &#123;<br>                            reject(e)<br>                        &#125;<br><br>                    &#125;)<br>                &#125;)<br>            &#125;<br>        &#125;)<br>        <span class="hljs-keyword">return</span> promise2<br>    &#125;<br>&#125;<br><br>Promise.PENDING = &#x27;pending&#x27;<span class="hljs-comment">;</span><br>Promise.FULFILLED = &#x27;fulfilled&#x27;<span class="hljs-comment">;</span><br>Promise.REJECTED = &#x27;rejected&#x27;<span class="hljs-comment">;</span><br><br>Promise.resolvePromise = (promise2,x,resolve,reject) =&gt; &#123;<br>    if(promise2 === x)&#123;<br>        reject(<span class="hljs-keyword">new</span> TypeError(&#x27;Chaining cycle detected for promise&#x27;))<br>    &#125;<br><br>    if(x instanceof Promise)&#123;<br>        x.then(value =&gt; &#123;<br>            Promise.resolvePromise(promise2,value,resolve,reject)<br>        &#125;, reason =&gt; &#123;<br>            reject(reason)<br>        &#125;)<br>    &#125;else if(x !== null &amp;&amp; (typeof x === &#x27;object&#x27; || typeof x === &#x27;function&#x27;))&#123;<br>        let called = <span class="hljs-literal">false</span><br>        try&#123;<br>            const then = x.then<br>            if(typeof then === &#x27;function&#x27;)&#123;<br>                then.call(x,value =&gt; &#123;<br>                    if(called)  <span class="hljs-keyword">return</span><br>                    called = <span class="hljs-literal">true</span><br>                    Promise.resolvePromise(promise2, value, resolve, reject)<br>                &#125;, reason =&gt; &#123;<br>                    if(called)  <span class="hljs-keyword">return</span><br>                    called = <span class="hljs-literal">true</span><br>                    reject(reason)<br>                &#125;)<br>            &#125;else&#123;<br>                if(called)  <span class="hljs-keyword">return</span><br>                called = <span class="hljs-literal">true</span><br>                resolve(x)<br>            &#125;<br>        &#125;catch (e) &#123;<br>            if(called)  <span class="hljs-keyword">return</span><br>            called = <span class="hljs-literal">true</span><br>            reject(e)<br>        &#125;<br>    &#125;else&#123;<br>        resolve(x)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></code></pre></li></ul></li></ul><h2 id="如何测试代码是否符合Promise-A-规范"><a href="#如何测试代码是否符合Promise-A-规范" class="headerlink" title="如何测试代码是否符合Promise&#x2F;A+规范"></a>如何测试代码是否符合Promise&#x2F;A+规范</h2><p>在你的项目中安装<code>promises-aplus-tests</code></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> promises-aplus-tests<br></code></pre></td></tr></table></figure><p>在<code>package.json</code>中添加<code>scripts</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;promise&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1.0.0&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;license&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;MIT&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;dependencies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;promises-aplus-tests&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^2.1.2&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;test&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;promises-aplus-tests promise.js&quot;</span><span class="hljs-comment">//填写你的文件位置</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>在你的代码中添加（将<code>promise</code>替换为你自己定义的类名）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Promise</span>.<span class="hljs-property">defer</span> = <span class="hljs-title class_">Promise</span>.<span class="hljs-property">deferred</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">let</span> dfd = &#123;&#125;;<br>    dfd.<span class="hljs-property">promise</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>)=&gt;</span>&#123;<br>        dfd.<span class="hljs-property">resolve</span> = resolve;<br>        dfd.<span class="hljs-property">reject</span> = reject;<br>    &#125;);<br>    <span class="hljs-keyword">return</span> dfd;<br>&#125;<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> =  <span class="hljs-title class_">Promise</span><br></code></pre></td></tr></table></figure><p>在控制台运行指令<code>npm run test</code></p>]]></content>
    
    
    <categories>
      
      <category>1</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript数组方法详解</title>
    <link href="/2023/09/01/JavaScript%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3/"/>
    <url>/2023/09/01/JavaScript%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="1-创建数组"><a href="#1-创建数组" class="headerlink" title="1.创建数组"></a>1.创建数组</h2><h3 id="1-字面量创建数组"><a href="#1-字面量创建数组" class="headerlink" title="1. 字面量创建数组"></a>1. 字面量创建数组</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = []<br></code></pre></td></tr></table></figure><h3 id="2-使用Array构造函数"><a href="#2-使用Array构造函数" class="headerlink" title="2. 使用Array构造函数"></a>2. 使用Array构造函数</h3><blockquote><p>创建一个空数组</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>()<br></code></pre></td></tr></table></figure><blockquote><p>如果只传一个数值参数，则表示创建一个初始长度为指定数值的空数组</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-number">20</span>)<span class="hljs-comment">// 创建一个包含20项的数组</span><br></code></pre></td></tr></table></figure><blockquote><p>如果传入一个非数值的参数或者参数个数大于 1，则表示创建一个包含指定元素的数组</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-string">&quot;lily&quot;</span>,<span class="hljs-string">&quot;lucy&quot;</span>,<span class="hljs-string">&quot;Tom&quot;</span>)<span class="hljs-comment">// 创建一个包含3个字符串的数组 </span><br><span class="hljs-keyword">var</span> array4 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-string">&#x27;23&#x27;</span>)<span class="hljs-comment">// [&quot;23&quot;]</span><br></code></pre></td></tr></table></figure><h3 id="3-Array-of-方法创建数组"><a href="#3-Array-of-方法创建数组" class="headerlink" title="3. Array.of 方法创建数组"></a>3. Array.of 方法创建数组</h3><blockquote><p><code>Array.of()</code>方法总会创建一个包含所有传入参数的数组，而不管参数的数量与类型。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">of</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-property">length</span>);<span class="hljs-comment">//2</span><br><br><span class="hljs-keyword">let</span> arr1 = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">of</span>(<span class="hljs-number">3</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr1.<span class="hljs-property">length</span>);<span class="hljs-comment">//1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr1[<span class="hljs-number">0</span>]);<span class="hljs-comment">//3</span><br><br><span class="hljs-keyword">let</span> arr2 = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">of</span>(<span class="hljs-string">&#x27;2&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr2.<span class="hljs-property">length</span>);<span class="hljs-comment">//1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr2[<span class="hljs-number">0</span>]);<span class="hljs-comment">//&#x27;2&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="4-Array-from-方法创建数组"><a href="#4-Array-from-方法创建数组" class="headerlink" title="4.Array.from 方法创建数组"></a>4.Array.from 方法创建数组</h3><p><strong><code>Array.from()</code></strong> 静态方法从<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols#%E5%8F%AF%E8%BF%AD%E4%BB%A3%E5%8D%8F%E8%AE%AE">可迭代</a>或<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Indexed_collections#%E4%BD%BF%E7%94%A8%E7%B1%BB%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1">类数组</a>对象创建一个新的浅拷贝的数组实例。</p><blockquote><p>Map转数组</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>([[<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-number">1</span>],[<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-number">2</span>]])<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(map))<span class="hljs-comment">//[[&#x27;a&#x27;,1],[&#x27;b&#x27;,2]]</span><br></code></pre></td></tr></table></figure><blockquote><p>Set转数组</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>])<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(set))<span class="hljs-comment">//[1,2,3]</span><br></code></pre></td></tr></table></figure><blockquote><p>arguments转数组</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(<span class="hljs-variable language_">arguments</span>))<span class="hljs-comment">//[1,2,3]</span><br>&#125;<br><span class="hljs-title function_">foo</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><blockquote><p>类对象转数组</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> obj = &#123;<br>    <span class="hljs-number">0</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-number">1</span>: <span class="hljs-number">2</span>,<br>    <span class="hljs-number">2</span>: <span class="hljs-number">3</span>,<br>    <span class="hljs-attr">length</span>: <span class="hljs-number">3</span><br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(obj))<span class="hljs-comment">//[1,2,3]</span><br></code></pre></td></tr></table></figure><h3 id="5-Array-from的映射转换"><a href="#5-Array-from的映射转换" class="headerlink" title="5. Array.from的映射转换"></a>5. Array.from的映射转换</h3><blockquote><p>Array.from方法接受第二个参数</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> obj = &#123;<br>    <span class="hljs-number">0</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-number">1</span>: <span class="hljs-number">2</span>,<br>    <span class="hljs-number">2</span>: <span class="hljs-number">3</span>,<br>    <span class="hljs-attr">length</span>: <span class="hljs-number">3</span><br>&#125;<br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(obj,<span class="hljs-function">(<span class="hljs-params">item,index</span>)=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item,index)<br>    <span class="hljs-keyword">return</span> item<br>&#125;)<br><span class="hljs-comment">//1 0</span><br><span class="hljs-comment">//2 1</span><br><span class="hljs-comment">//3 2</span><br></code></pre></td></tr></table></figure><blockquote><p>如果映射函数需要在对象上工作，你可以手动传递第三个参数给 Array.from()方法，从而指定映射函数内部的 this 值</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> helper = &#123;<br>  <span class="hljs-attr">diff</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-title function_">add</span>(<span class="hljs-params">value</span>) &#123;<br>    <span class="hljs-keyword">return</span> value + <span class="hljs-variable language_">this</span>.<span class="hljs-property">diff</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">translate</span>(<span class="hljs-params"></span>) &#123;<br> <span class="hljs-comment">//arguments 是一个对应于传递给函数的参数的类数组对象</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(<span class="hljs-variable language_">arguments</span>, helper.<span class="hljs-property">add</span>, helper); <br>&#125;<br><br><span class="hljs-keyword">let</span> arr = <span class="hljs-title function_">translate</span>(<span class="hljs-string">&#x27;liu&#x27;</span>, <span class="hljs-number">26</span>, <span class="hljs-string">&#x27;man&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr); <span class="hljs-comment">// [&quot;liu1&quot;, 27, &quot;man1&quot;]</span><br></code></pre></td></tr></table></figure><h2 id="2-数组原型链上的方法"><a href="#2-数组原型链上的方法" class="headerlink" title="2. 数组原型链上的方法"></a>2. 数组原型链上的方法</h2><ul><li><p><code>join()</code>：用指定的分隔符将数组每一项拼接为字符串</p></li><li><p><code>push()</code> ：向数组的末尾添加新元素</p></li><li><p><code>pop()</code>：删除数组的最后一项</p></li><li><p><code>unshift()</code>：向数组首位添加新元素</p></li><li><p><code>shift()</code>：删除数组的第一项</p></li><li><p><code>slice()</code>：按照条件查找出其中的部分元素</p></li><li><p><code>splice()</code>：对数组进行增删改</p></li><li><p><code>fill()</code>: 方法能使用特定值填充数组中的一个或多个元素</p></li><li><p><code>filter()</code>:“过滤”功能</p></li><li><p><code>concat()</code>：用于连接两个或多个数组</p></li><li><p><code>indexOf()</code>：检测当前值在数组中第一次出现的位置索引</p></li><li><p><code>lastIndexOf()</code>：检测当前值在数组中最后一次出现的位置索引</p></li><li><p><code>every()</code>：判断数组中每一项都是否满足条件</p></li><li><p><code>some()</code>：判断数组中是否存在满足条件的项</p></li><li><p><code>includes()</code>：判断一个数组是否包含一个指定的值</p></li><li><p><code>sort()</code>：对数组的元素进行排序</p></li><li><p><code>reverse()</code>：对数组进行倒序</p></li><li><p><code>forEach()</code>：ES5 及以下循环遍历数组每一项</p></li><li><p><code>map()</code>：ES6 循环遍历数组每一项</p></li><li><p><code>copyWithin()</code>:用于从数组的指定位置拷贝元素到数组的另一个指定位置中</p></li><li><p><code>find()</code>:返回匹配的值</p></li><li><p><code>findIndex()</code>:返回匹配位置的索引</p></li><li><p><code>toLocaleString()、toString()</code>:将数组转换为字符串</p></li><li><p><code>flat()、flatMap()</code>：扁平化数组</p></li><li><p><code>entries() 、keys() 、values()</code>:遍历数组</p></li></ul><h3 id="1-join"><a href="#1-join" class="headerlink" title="1. join()"></a>1. join()</h3><blockquote><p><strong><code>join()</code></strong> 方法将一个数组（或一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Indexed_collections#%E4%BD%BF%E7%94%A8%E7%B1%BB%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1">类数组对象</a>）的所有元素连接成一个字符串并返回这个字符串，用逗号或指定的分隔符字符串分隔。如果数组只有一个元素，那么将返回该元素而不使用分隔符</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr = [<span class="hljs-string">&#x27;Fire&#x27;</span>, <span class="hljs-string">&#x27;Air&#x27;</span>, <span class="hljs-string">&#x27;Water&#x27;</span>];<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-title function_">join</span>());<br><span class="hljs-comment">// Expected output: &quot;Fire,Air,Water&quot;</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>));<br><span class="hljs-comment">// Expected output: &quot;FireAirWater&quot;</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;-&#x27;</span>));<br><span class="hljs-comment">// Expected output: &quot;Fire-Air-Water&quot;</span><br></code></pre></td></tr></table></figure><h3 id="2-push"><a href="#2-push" class="headerlink" title="2. push()"></a>2. push()</h3><blockquote><p><strong><code>push()</code></strong> 方法将指定的元素添加到数组的末尾，并返回新的数组长度。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>]<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;c&#x27;</span>))<span class="hljs-comment">//3</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr)<span class="hljs-comment">//[&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;]</span><br></code></pre></td></tr></table></figure><h3 id="3-pop"><a href="#3-pop" class="headerlink" title="3. pop()"></a>3. pop()</h3><blockquote><p><strong><code>pop()</code></strong> 方法从数组中删除<strong>最后一个</strong>元素，并返回该元素的值。此方法会更改数组的长度。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>]<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-title function_">pop</span>())<span class="hljs-comment">//c</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr)[<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>]<br></code></pre></td></tr></table></figure><h3 id="4-unshift"><a href="#4-unshift" class="headerlink" title="4. unshift()"></a>4. unshift()</h3><blockquote><p><strong><code>shift()</code></strong> 方法将指定元素添加到数组的开头，并返回数组的新长度。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>]<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;c&#x27;</span>))<span class="hljs-comment">//3</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr)<span class="hljs-comment">//[&#x27;c&#x27;,&#x27;a&#x27;,&#x27;b&#x27;]</span><br></code></pre></td></tr></table></figure><h3 id="5-shift"><a href="#5-shift" class="headerlink" title="5. shift()"></a>5. shift()</h3><blockquote><p><strong><code>shift()</code></strong> 方法从数组中删除<strong>第一个</strong>元素，并返回该元素的值。此方法更改数组的长度。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>]<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-title function_">pop</span>())<span class="hljs-comment">//a</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr)[<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>]<br></code></pre></td></tr></table></figure><h3 id="6-sort"><a href="#6-sort" class="headerlink" title="6. sort()"></a>6. sort()</h3><blockquote><p><strong><code>sort()</code></strong> 方法<a href="https://zh.wikipedia.org/wiki/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95"><em>就地</em></a>对数组的元素进行排序，并返回对相同数组的引用。默认排序是将元素转换为字符串，然后按照它们的 UTF-16 码元值升序排序。</p><p>由于它取决于具体实现，因此无法保证排序的时间和空间复杂度。</p><p>如果想要不改变原数组的排序方法，可以使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/toSorted"><code>toSorted()</code></a>。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> months = [<span class="hljs-string">&#x27;March&#x27;</span>, <span class="hljs-string">&#x27;Jan&#x27;</span>, <span class="hljs-string">&#x27;Feb&#x27;</span>, <span class="hljs-string">&#x27;Dec&#x27;</span>];<br>months.<span class="hljs-title function_">sort</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(months);<br><span class="hljs-comment">// Expected output: Array [&quot;Dec&quot;, &quot;Feb&quot;, &quot;Jan&quot;, &quot;March&quot;]</span><br><br><span class="hljs-keyword">const</span> array1 = [<span class="hljs-number">1</span>, <span class="hljs-number">30</span>, <span class="hljs-number">4</span>, <span class="hljs-number">21</span>, <span class="hljs-number">100000</span>];<br>array1.<span class="hljs-title function_">sort</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(array1);<br><span class="hljs-comment">// Expected output: Array [1, 100000, 21, 30, 4]</span><br></code></pre></td></tr></table></figure><blockquote><p>**<code>sort()</code>**接受一个函数类型的参数<code>compareFn</code>，用于排序</p><p><code>compareFn</code>函数接受两个参数</p><p><code>a</code>：第一个用于比较的元素。不会是 <code>undefined</code></p><p><code>b</code>：第二个用于比较的元素。不会是 <code>undefined</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">1</span>]<br>arr.<span class="hljs-title function_">sort</span>(<span class="hljs-function">(<span class="hljs-params">a,b</span>)=&gt;</span>a-b)<br><span class="hljs-comment">// Expected output: Array [ 1, 2, 3, 4, 5, 6 ]</span><br>arr.<span class="hljs-title function_">sort</span>(<span class="hljs-function">(<span class="hljs-params">a,b</span>)=&gt;</span>b-a)<br><span class="hljs-comment">// Expected output: Array [ 6, 5, 4, 3, 2, 1 ]</span><br></code></pre></td></tr></table></figure><table><thead><tr><th align="left"><code>compareFn(a, b)</code> 返回值</th><th align="left">排序顺序</th></tr></thead><tbody><tr><td align="left">&gt; 0</td><td align="left"><code>a</code> 在 <code>b</code> 后，如 <code>[b, a]</code></td></tr><tr><td align="left">&lt; 0</td><td align="left"><code>a</code> 在 <code>b</code> 前，如 <code>[a, b]</code></td></tr><tr><td align="left">&#x3D;&#x3D;&#x3D; 0</td><td align="left">保持 <code>a</code> 和 <code>b</code> 原来的顺序</td></tr></tbody></table><h3 id="7-reverse"><a href="#7-reverse" class="headerlink" title="7. reverse()"></a>7. reverse()</h3><blockquote><p>reverse() 方法用于颠倒数组中元素的顺序。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">13</span>, <span class="hljs-number">24</span>, <span class="hljs-number">51</span>, <span class="hljs-number">3</span>];<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-title function_">reverse</span>());   <span class="hljs-comment">//[3, 51, 24, 13]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr);   <span class="hljs-comment">//[3, 51, 24, 13](原数组改变)</span><br></code></pre></td></tr></table></figure><h3 id="8-concat"><a href="#8-concat" class="headerlink" title="8. concat()"></a>8. concat()</h3><blockquote><p><strong><code>concat()</code></strong> 方法用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>];<br><span class="hljs-keyword">let</span> arrCopy = arr.<span class="hljs-title function_">concat</span>(<span class="hljs-number">9</span>,[<span class="hljs-number">11</span>,<span class="hljs-number">13</span>],[<span class="hljs-number">14</span>,<span class="hljs-number">15</span>]);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arrCopy);   <span class="hljs-comment">//[1, 3, 5, 7, 9, 11, 13,14,15]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr);   <span class="hljs-comment">// [1, 3, 5, 7](原数组未被修改)</span><br></code></pre></td></tr></table></figure><blockquote><p>slice()：返回从原数组中指定开始下标到结束下标之间的项组成的新数组</p><p>slice()方法可以接受一或两个参数，即要返回项的起始和结束位置</p><p>在<strong>只有一个参数</strong>的情况下， slice()方法返回从该参数指定位置开始到当前数组末尾的所有项</p><p>如果<strong>有两个参数</strong>，该方法返回起始和结束位置之间的项，但不包括结束位置的项</p></blockquote><h3 id="9-splice"><a href="#9-splice" class="headerlink" title="9.splice()"></a>9.splice()</h3><blockquote><p><strong><code>splice()</code></strong> 方法通过移除或者替换已存在的元素和&#x2F;或添加新元素<a href="https://zh.wikipedia.org/wiki/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95">就地</a>改变一个数组的内容。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>1</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/09/01/hello-world/"/>
    <url>/2023/09/01/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>1</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
